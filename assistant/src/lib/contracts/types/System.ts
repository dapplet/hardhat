/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDiamondReadable {
  export type FacetStruct = {
    target: PromiseOrValue<string>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetStructOutput = [string, string[]] & {
    target: string;
    selectors: string[];
  };
}

export declare namespace IDiamondWritableInternal {
  export type FacetCutStruct = {
    target: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export declare namespace IPKG {
  export type UPGRADEStruct = {
    cuts: IDiamondWritableInternal.FacetCutStruct[];
    target: PromiseOrValue<string>;
    selector: PromiseOrValue<BytesLike>;
  };

  export type UPGRADEStructOutput = [
    IDiamondWritableInternal.FacetCutStructOutput[],
    string,
    string
  ] & {
    cuts: IDiamondWritableInternal.FacetCutStructOutput[];
    target: string;
    selector: string;
  };
}

export interface SystemInterface extends utils.Interface {
  functions: {
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "nomineeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "installedBy(address)": FunctionFragment;
    "installersOf(address)": FunctionFragment;
    "isPkg(address)": FunctionFragment;
    "metadataOf(address[])": FunctionFragment;
    "name()": FunctionFragment;
    "ownedBy(address)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "receivedStakeOf(address)": FunctionFragment;
    "sentStakeOf(address)": FunctionFragment;
    "stake(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "createClient()": FunctionFragment;
    "getClientUpgrade(string)": FunctionFragment;
    "setClientUpgrade(string,(address,uint8,bytes4[])[],address,bytes4)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "createPkg(((address,uint8,bytes4[])[],address,bytes4),string,address)": FunctionFragment;
    "installPkg(address,address,bytes4,bytes)": FunctionFragment;
    "model()": FunctionFragment;
    "uninstallPkg(address,address,bytes4,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "facetAddress"
      | "facetAddresses"
      | "facetFunctionSelectors"
      | "facets"
      | "supportsInterface"
      | "acceptOwnership"
      | "nomineeOwner"
      | "owner"
      | "transferOwnership"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "installedBy"
      | "installersOf"
      | "isPkg"
      | "metadataOf"
      | "name"
      | "ownedBy"
      | "ownerOf"
      | "receivedStakeOf"
      | "sentStakeOf"
      | "stake"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unstake"
      | "createClient"
      | "getClientUpgrade"
      | "setClientUpgrade"
      | "diamondCut"
      | "createPkg"
      | "installPkg"
      | "model"
      | "uninstallPkg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nomineeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "installedBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "installersOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPkg",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataOf",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownedBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedStakeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sentStakeOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createClient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClientUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClientUpgrade",
    values: [
      PromiseOrValue<string>,
      IDiamondWritableInternal.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      IDiamondWritableInternal.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPkg",
    values: [IPKG.UPGRADEStruct, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "installPkg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "model", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uninstallPkg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nomineeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installersOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPkg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "metadataOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownedBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedStakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentStakeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClientUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPkg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "installPkg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "model", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uninstallPkg",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Stake(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstake(address,address,uint256)": EventFragment;
    "FeePaid(address,address,uint256)": EventFragment;
    "FeePaid(address,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "ClientUpgraded(address,address,address,bool)": EventFragment;
    "PackageCreated(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeePaid(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeePaid(address,address,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged(bytes32,bytes32,bytes32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged(bytes32,bytes32,bytes32)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGranted(bytes32,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGranted(bytes32,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRevoked(bytes32,address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRevoked(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClientUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PackageCreated"): EventFragment;
}

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferred_address_address_Event = TypedEvent<
  [string, string],
  OwnershipTransferred_address_address_EventObject
>;

export type OwnershipTransferred_address_address_EventFilter =
  TypedEventFilter<OwnershipTransferred_address_address_Event>;

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferred_address_address_Event = TypedEvent<
  [string, string],
  OwnershipTransferred_address_address_EventObject
>;

export type OwnershipTransferred_address_address_EventFilter =
  TypedEventFilter<OwnershipTransferred_address_address_Event>;

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferred_address_address_Event = TypedEvent<
  [string, string],
  OwnershipTransferred_address_address_EventObject
>;

export type OwnershipTransferred_address_address_EventFilter =
  TypedEventFilter<OwnershipTransferred_address_address_Event>;

export interface Approval_address_address_uint256_EventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type Approval_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Approval_address_address_uint256_EventObject
>;

export type Approval_address_address_uint256_EventFilter =
  TypedEventFilter<Approval_address_address_uint256_Event>;

export interface Approval_address_address_uint256_EventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type Approval_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Approval_address_address_uint256_EventObject
>;

export type Approval_address_address_uint256_EventFilter =
  TypedEventFilter<Approval_address_address_uint256_Event>;

export interface Approval_address_address_uint256_EventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type Approval_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Approval_address_address_uint256_EventObject
>;

export type Approval_address_address_uint256_EventFilter =
  TypedEventFilter<Approval_address_address_uint256_Event>;

export interface StakeEventObject {
  pkg: string;
  account: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, string, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface Transfer_address_address_uint256_EventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type Transfer_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Transfer_address_address_uint256_EventObject
>;

export type Transfer_address_address_uint256_EventFilter =
  TypedEventFilter<Transfer_address_address_uint256_Event>;

export interface Transfer_address_address_uint256_EventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type Transfer_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Transfer_address_address_uint256_EventObject
>;

export type Transfer_address_address_uint256_EventFilter =
  TypedEventFilter<Transfer_address_address_uint256_Event>;

export interface Transfer_address_address_uint256_EventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type Transfer_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  Transfer_address_address_uint256_EventObject
>;

export type Transfer_address_address_uint256_EventFilter =
  TypedEventFilter<Transfer_address_address_uint256_Event>;

export interface UnstakeEventObject {
  pkg: string;
  account: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeEventObject
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface FeePaid_address_address_uint256_EventObject {
  recipient: string;
  sender: string;
  amount: BigNumber;
}
export type FeePaid_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  FeePaid_address_address_uint256_EventObject
>;

export type FeePaid_address_address_uint256_EventFilter =
  TypedEventFilter<FeePaid_address_address_uint256_Event>;

export interface FeePaid_address_address_uint256_EventObject {
  recipient: string;
  sender: string;
  amount: BigNumber;
}
export type FeePaid_address_address_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  FeePaid_address_address_uint256_EventObject
>;

export type FeePaid_address_address_uint256_EventFilter =
  TypedEventFilter<FeePaid_address_address_uint256_Event>;

export interface RoleAdminChanged_bytes32_bytes32_bytes32_EventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChanged_bytes32_bytes32_bytes32_Event = TypedEvent<
  [string, string, string],
  RoleAdminChanged_bytes32_bytes32_bytes32_EventObject
>;

export type RoleAdminChanged_bytes32_bytes32_bytes32_EventFilter =
  TypedEventFilter<RoleAdminChanged_bytes32_bytes32_bytes32_Event>;

export interface RoleAdminChanged_bytes32_bytes32_bytes32_EventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChanged_bytes32_bytes32_bytes32_Event = TypedEvent<
  [string, string, string],
  RoleAdminChanged_bytes32_bytes32_bytes32_EventObject
>;

export type RoleAdminChanged_bytes32_bytes32_bytes32_EventFilter =
  TypedEventFilter<RoleAdminChanged_bytes32_bytes32_bytes32_Event>;

export interface RoleGranted_bytes32_address_address_EventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGranted_bytes32_address_address_Event = TypedEvent<
  [string, string, string],
  RoleGranted_bytes32_address_address_EventObject
>;

export type RoleGranted_bytes32_address_address_EventFilter =
  TypedEventFilter<RoleGranted_bytes32_address_address_Event>;

export interface RoleGranted_bytes32_address_address_EventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGranted_bytes32_address_address_Event = TypedEvent<
  [string, string, string],
  RoleGranted_bytes32_address_address_EventObject
>;

export type RoleGranted_bytes32_address_address_EventFilter =
  TypedEventFilter<RoleGranted_bytes32_address_address_Event>;

export interface RoleRevoked_bytes32_address_address_EventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevoked_bytes32_address_address_Event = TypedEvent<
  [string, string, string],
  RoleRevoked_bytes32_address_address_EventObject
>;

export type RoleRevoked_bytes32_address_address_EventFilter =
  TypedEventFilter<RoleRevoked_bytes32_address_address_Event>;

export interface RoleRevoked_bytes32_address_address_EventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevoked_bytes32_address_address_Event = TypedEvent<
  [string, string, string],
  RoleRevoked_bytes32_address_address_EventObject
>;

export type RoleRevoked_bytes32_address_address_EventFilter =
  TypedEventFilter<RoleRevoked_bytes32_address_address_Event>;

export interface DiamondCutEventObject {
  facetCuts: IDiamondWritableInternal.FacetCutStructOutput[];
  target: string;
  data: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondWritableInternal.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface ClientUpgradedEventObject {
  pkg: string;
  client: string;
  caller: string;
  install: boolean;
}
export type ClientUpgradedEvent = TypedEvent<
  [string, string, string, boolean],
  ClientUpgradedEventObject
>;

export type ClientUpgradedEventFilter = TypedEventFilter<ClientUpgradedEvent>;

export interface PackageCreatedEventObject {
  pkg: string;
  creator: string;
}
export type PackageCreatedEvent = TypedEvent<
  [string, string],
  PackageCreatedEventObject
>;

export type PackageCreatedEventFilter = TypedEventFilter<PackageCreatedEvent>;

export interface System extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { facet: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    facetFunctionSelectors(
      facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { selectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<
      [IDiamondReadable.FacetStructOutput[]] & {
        diamondFacets: IDiamondReadable.FacetStructOutput[];
      }
    >;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    installedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pkgs: string[] }>;

    installersOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { installers: string[] }>;

    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { metadata: string[] }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pkgs: string[] }>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    stake(
      pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      holder: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      pkg: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createClient(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClientUpgrade(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IDiamondWritableInternal.FacetCutStructOutput[], string, string] & {
        cuts: IDiamondWritableInternal.FacetCutStructOutput[];
        target: string;
        data: string;
      }
    >;

    setClientUpgrade(
      _title: PromiseOrValue<string>,
      _cuts: IDiamondWritableInternal.FacetCutStruct[],
      _target: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondCut(
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPkg(
      _pkg: IPKG.UPGRADEStruct,
      _ipfsCid: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    model(overrides?: CallOverrides): Promise<[string]>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  facetAddress(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    facet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(
    overrides?: CallOverrides
  ): Promise<IDiamondReadable.FacetStructOutput[]>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nomineeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    holder: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  installedBy(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  installersOf(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isPkg(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataOf(
    pkgs: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  name(overrides?: CallOverrides): Promise<string>;

  ownedBy(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  ownerOf(
    pkg: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  receivedStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  sentStakeOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
  >;

  stake(
    pkg: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    holder: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    pkg: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createClient(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClientUpgrade(
    _title: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [IDiamondWritableInternal.FacetCutStructOutput[], string, string] & {
      cuts: IDiamondWritableInternal.FacetCutStructOutput[];
      target: string;
      data: string;
    }
  >;

  setClientUpgrade(
    _title: PromiseOrValue<string>,
    _cuts: IDiamondWritableInternal.FacetCutStruct[],
    _target: PromiseOrValue<string>,
    _selector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondCut(
    facetCuts: IDiamondWritableInternal.FacetCutStruct[],
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPkg(
    _pkg: IPKG.UPGRADEStruct,
    _ipfsCid: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installPkg(
    _pkg: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    initFn: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  model(overrides?: CallOverrides): Promise<string>;

  uninstallPkg(
    _pkg: PromiseOrValue<string>,
    _caller: PromiseOrValue<string>,
    initFn: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(
      overrides?: CallOverrides
    ): Promise<IDiamondReadable.FacetStructOutput[]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    nomineeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    installedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    installersOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { pkgs: string[]; amounts: BigNumber[] }
    >;

    stake(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      holder: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstake(
      pkg: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createClient(overrides?: CallOverrides): Promise<string>;

    getClientUpgrade(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IDiamondWritableInternal.FacetCutStructOutput[], string, string] & {
        cuts: IDiamondWritableInternal.FacetCutStructOutput[];
        target: string;
        data: string;
      }
    >;

    setClientUpgrade(
      _title: PromiseOrValue<string>,
      _cuts: IDiamondWritableInternal.FacetCutStruct[],
      _target: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondCut(
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPkg(
      _pkg: IPKG.UPGRADEStruct,
      _ipfsCid: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    model(overrides?: CallOverrides): Promise<string>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferred_address_address_EventFilter;
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferred_address_address_EventFilter;
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferred_address_address_EventFilter;
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): Approval_address_address_uint256_EventFilter;
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): Approval_address_address_uint256_EventFilter;
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): Approval_address_address_uint256_EventFilter;

    "Stake(address,address,uint256)"(
      pkg?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      pkg?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): Transfer_address_address_uint256_EventFilter;
    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): Transfer_address_address_uint256_EventFilter;
    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): Transfer_address_address_uint256_EventFilter;

    "Unstake(address,address,uint256)"(
      pkg?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      pkg?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;

    "FeePaid(address,address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): FeePaid_address_address_uint256_EventFilter;
    "FeePaid(address,address,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      amount?: null
    ): FeePaid_address_address_uint256_EventFilter;
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChanged_bytes32_bytes32_bytes32_EventFilter;
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChanged_bytes32_bytes32_bytes32_EventFilter;
    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGranted_bytes32_address_address_EventFilter;
    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGranted_bytes32_address_address_EventFilter;
    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevoked_bytes32_address_address_EventFilter;
    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevoked_bytes32_address_address_EventFilter;

    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;

    "ClientUpgraded(address,address,address,bool)"(
      pkg?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      install?: null
    ): ClientUpgradedEventFilter;
    ClientUpgraded(
      pkg?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      install?: null
    ): ClientUpgradedEventFilter;

    "PackageCreated(address,address)"(
      pkg?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): PackageCreatedEventFilter;
    PackageCreated(
      pkg?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): PackageCreatedEventFilter;
  };

  estimateGas: {
    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nomineeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    installedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    installersOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      holder: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      pkg: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createClient(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClientUpgrade(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setClientUpgrade(
      _title: PromiseOrValue<string>,
      _cuts: IDiamondWritableInternal.FacetCutStruct[],
      _target: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondCut(
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPkg(
      _pkg: IPKG.UPGRADEStruct,
      _ipfsCid: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    model(overrides?: CallOverrides): Promise<BigNumber>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    facetAddress(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      facet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nomineeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      holder: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    installedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    installersOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPkg(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataOf(
      pkgs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownedBy(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      pkg: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sentStakeOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      pkg: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      holder: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      pkg: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createClient(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClientUpgrade(
      _title: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setClientUpgrade(
      _title: PromiseOrValue<string>,
      _cuts: IDiamondWritableInternal.FacetCutStruct[],
      _target: PromiseOrValue<string>,
      _selector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondCut(
      facetCuts: IDiamondWritableInternal.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPkg(
      _pkg: IPKG.UPGRADEStruct,
      _ipfsCid: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    model(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uninstallPkg(
      _pkg: PromiseOrValue<string>,
      _caller: PromiseOrValue<string>,
      initFn: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
